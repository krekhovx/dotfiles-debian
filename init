#!/usr/bin/env bash
#
# This main project script which configure/install my Debian environment (dotfiles).
# Configures the necessary tools for development and convenience.
# Minimalistic environment and instruments with old-school fonts.
#
# Be careful when running this script on your main machine,
# it does not create backup dotfiles and may erase your current working environment.
#
# After running:
# $ ./init --xfce
# $ ./init --unclutter
# need to restart the session.
#

set -ex

umask 077

check_package()
{
	dpkg -l | awk '{print $2}' | grep ^$1$ &>/dev/null && return 0 || return 1
}

# ------------------------------------------------------------------

mark_start="# ----"
mark_end="# ---- Don't write after this"

mark_start_file()
{
	echo -e "\n$mark_start\n" >> $1
}

mark_end_file()
{
	echo -e "\n$mark_end" >> $1
}

bold_message()
{
	echo -e "\e[96m*** ----- $1 ----- ***\e[0m"
}

remove_marked_lines()
{
	if grep "^$mark_start" $1; then
		sed -i "/$mark_start/Q" $1 # remove all lines after pattern
		sed -i '$ d' $1 # remove last empty line
	fi
}

usage()
{
cat << EOF
Usage: $(basename $0) [option]

  [option]

  --install-packages     install environment dependencies

  --sources.list         sources.list installation

  --clean-home           cleanup home directory, configure user-dirs.*

  --bash                 ~/.bashrc and ~/.bash_aliases installation

  --dircolors            ~/.dircolors installation

  --bash-completion      enable bash completion

  --locales              generate 'en_US' 'ru_RU' locales

  --xfce                 full xfce installation (desktop session)
                         includes all ~/.config/xfce4/xfconf/xfce-perchannel-xml files

  --xfce-terminal        xfce terminal emulator installation
                         ~/.config/xfce4/terminal/terminalrc + colorschemes

  --mousepad             mousepad text editor installation

  --mc                   midnight commander installation with vim hotkeys

  --tmux                 terminal multiplexer installation

  --vim                  vim text editor installation with plugins

  --vifm                 vifm installation

  --gdb                  gdb debugger installation

  --local-bin            ~/.local/bin installation

  --local-share          ~/.local/share installation

  --gitconfig            ~/.gitconfig installation

  --unclutter            unclutter installation

  --newsboat             rss feed reader installation

  -h, --help             show this help and exit

EOF

exit 0
}

# ------------------------------------------------------------------

for arg in "$@"; do
	case "$arg" in
		"--install-packages")
			set +e
			for p in $(grep -v '^#' pkgs.list); do
				if ! check_package $p; then
					sudo eatmydata apt-get -y install $p
					echo -e "$?\n"
				fi
			done
			set -e

			sudo mandb
			sudo apt-file update
		;;

		"--sources.list")
			bold_message "sources.list installation"
			sudo cp -v ./sources.list /etc/apt/
			sudo apt-get update
		;;

		"--clean-home")
			bold_message "Cleanup $HOME"

			trash_dirs=(Видео Общедоступные Шаблоны Документы \
			            Videos Public Templates Documents)

			# I don't need these dirs =)
			for dir in ${trash_dirs[*]}; do
				[ -d ~/$dir ] && rm -ri ~/$dir
			done

			mkdir ~/git &>/dev/null | true
			mkdir ~/sources &>/dev/null | true
			ls ~

			cp -v ./.config/user-dirs.dirs ~/.config
			cp -v ./.config/user-dirs.locale ~/.config
		;;

		"--bash")
			bold_message "Bash installation"
			cp -v ./.bashrc ~/
			cp -v ./.bash_aliases ~/
		;;

		"--dircolors")
			bold_message "dircolors installation"
			cp -v ./.dircolors ~/
		;;

		"--bash-completion")
			bold_message "Enable bash completion"
			if check_package bash-completion; then
				sudo perl -i -pe '$i++ if /^#if ! shopt -oq posix;/; s/^#// if $i==1; $i=0 if /^fi/' \
				/etc/bash.bashrc
			else
				>&2 echo "Please, install 'bash-completion' package"
				exit 1
			fi
		;;

		"--locales")
			bold_message "Generate locales"
			if check_package locales; then
				for loc in en_US.UTF-8 ru_RU.UTF-8; do
					if ! grep ^$loc /etc/locale.gen &>/dev/null; then
						echo "$loc UTF-8" | sudo tee -a /etc/locale.gen
						sudo locale-gen
					fi
				done

				echo LANG="en_US.UTF8" | sudo tee /etc/default/locale
			else
				>&2 echo "Please, install 'locales' package"
				exit 1
			fi
		;;

		"--xfce")
			# XDG_DATA_DIRS not set in ssh session
			#if echo "$XDG_DATA_DIRS" | grep 'xfce' &>/dev/null; then

			bold_message "XFCE installation"
			if check_package xfce4; then
				cp -v ./.config/xfce4/xfconf/xfce-perchannel-xml/* \
				~/.config/xfce4/xfconf/xfce-perchannel-xml
			else
				>&2 echo "Current desktop environment not 'xfce'"
				exit 1
			fi

			# max brightness for laptops
			device_name=$(find /sys/class/backlight/ -mindepth 1)
			if [ -n "$device_name" ]; then
				max_brightness=$(cat $device_name/max_brightness)
				echo $max_brightness | sudo tee $device_name/brightness
			fi

			mkdir ~/.fonts &>/dev/null | true
			cp -v ./.fonts/* ~/.fonts
			fc-cache -f
		;;

		"--xfce-terminal")
			bold_message "XFCE terminal emulator installation"
			if check_package xfce4-terminal; then
				mkdir ~/.config/xfce4/terminal &>/dev/null | true
				cp -v ./.config/xfce4/terminal/terminalrc ~/.config/xfce4/terminal

				mkdir -p ~/.local/share/xfce4/terminal/colorschemes &>/dev/null | true
				cp -v ./.local/share/xfce4/terminal/colorschemes/* ~/.local/share/xfce4/terminal/colorschemes

				# Delete unattractive default color schemes.
				# Look at these ~/.local/share/xfce4/terminal/colorschemes/
				[ -d /usr/share/xfce4/terminal/colorschemes/ ] && \
				rm /usr/share/xfce4/terminal/colorschemes/* &>/dev/null
			else
				>&2 echo "Please, install 'xfce4-terminal' package"
				exit 1
			fi
		;;

		"--mousepad")
			bold_message "Mousepad installation"
			if check_package mousepad; then
				# How export mousepad configuration? Commands:
				# $ dconf dump /org/xfce/mousepad/ > mousepad.settings
				# $ dconf load /org/xfce/mousepad/ < mousepad.settings
				cp -v ./.config/dconf/mousepad.settings ~/.config/dconf
				dconf load /org/xfce/mousepad/ < ~/.config/dconf/mousepad.settings
			else
				>&2 echo "Please, install 'mousepad' package"
				exit 1
			fi
		;;

		"--mc")
			bold_message "Midnight Commander installation with Vim hotkeys"
			if check_package mc; then
				mkdir -p ~/.config/mc &>/dev/null | true
				sudo mkdir -p /root/.config/mc &>/dev/null | true

				cp -v ./.config/mc/{ini,panels.ini,hotlist} ~/.config/mc
				sudo cp -v ./.config/mc/{ini,panels.ini} /root/.config/mc

				# Available with mc 4.8.33
				# https://github.com/MidnightCommander/mc/issues/4588
				if [ -e /etc/mc/mc.vim.keymap ]; then
					sudo rm /etc/mc/mc.keymap
					sudo ln -s /etc/mc/mc.vim.keymap /etc/mc/mc.keymap
				fi
			else
				>&2 echo "Please, install 'mc' package"
				exit 1
			fi
		;;

		"--tmux")
			bold_message "Tmux installation"
			if check_package tmux; then
				cp -v ./.tmux.conf ~/.tmux.conf
			else
				>&2 echo "Please, install 'tmux' package"
				exit 1
			fi
		;;

		"--vim")
			bold_message "Vim installation with plugins"
			if check_package vim; then
				plug_vim=~/.vim/autoload/plug.vim

				if [ ! -e $plug_vim ]; then
					curl -fLo $plug_vim --create-dirs \
					https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
				fi

				cp -v ./.vimrc ~/.vimrc
				vim +PlugClean +PlugInstall +q +q
			else
				>&2 echo "Please, install 'vim' package"
				exit 1
			fi
		;;

		"--vifm")
			bold_message "Vifm installation"
			if check_package vifm; then
				mkdir ~/.config/vifm &>/dev/null | true
				sudo mkdir /root/.config/vifm &>/dev/null | true
				cp -v ./.config/vifm/vifmrc ~/.config/vifm/vifmrc
				sudo cp -v ./.config/vifm/vifmrc /root/.config/vifm/vifmrc
			else
				>&2 echo "Please, install 'vifm' package"
				exit 1
			fi
		;;

		"--gdb")
			bold_message "Gdb installation"
			if check_package gdb; then
				if [ ! -e ~/.gdbinit ]; then
					wget -P ~/ https://git.io/.gdbinit
					pip install pygments --break-system-packages
				fi

				remove_marked_lines ~/.gdbinit
				mark_start_file ~/.gdbinit
				cat ./.gdbinit >> ~/.gdbinit
				mark_end_file ~/.gdbinit
			else
				>&2 echo "Please, install 'gdb' package"
				exit 1
			fi
		;;

		"--local-bin")
			bold_message "~/.local/bin installation"
			mkdir ~/.local/bin &>/dev/null | true
			cp -v ./.local/bin/* ~/.local/bin
		;;

		"--local-share")
			bold_message "~/.local/share installation"
			mkdir ~/.local/share &>/dev/null | true
			cp -rv ./.local/share/* ~/.local/share
		;;

		"--gitconfig")
			bold_message "~/.gitconfig installation"
			if check_package git; then
				cp -v ./.gitconfig ~/
			else
				>&2 echo "Please, install 'git' package"
				exit 1
			fi
		;;

		"--unclutter")
			bold_message "Unclutter installation"
			if check_package unclutter && check_package unclutter-startup; then
				sudo sed -i 's/-idle 1/-idle 4/' /etc/default/unclutter
			else
				>&2 echo "Please, install 'unclutter' package"
				>&2 echo "Please, install 'unclutter-startup' package"
				exit 1
			fi
		;;

		"--newsboat")
			bold_message "RSS feed reader installation"
			if check_package newsboat; then
				mkdir ~/.newsboat &>/dev/null | true
				cp -v ./.newsboat/* ~/.newsboat
			else
				>&2 echo "Please, install 'newsboat' package"
				exit 1
			fi
		;;

		"-h" | "--help") usage ;;
	esac
done
